{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002/api';\nexport const api = {\n  // Systèmes\n  getSystems: async () => {\n    try {\n      const response = await fetch(`${API_URL}/systems`);\n      if (!response.ok) throw new Error('Erreur lors du chargement des systèmes');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      return [];\n    }\n  },\n  createSystem: async name => {\n    try {\n      const response = await fetch(`${API_URL}/systems`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name\n        })\n      });\n      if (!response.ok) throw new Error('Erreur lors de la création du système');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  deleteSystem: async systemId => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression du système');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  // Localisations\n  getLocations: async systemId => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}/locations`);\n      if (!response.ok) throw new Error('Erreur lors du chargement des localisations');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      return [];\n    }\n  },\n  createLocation: async (systemId, name) => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}/locations`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name\n        })\n      });\n      if (!response.ok) throw new Error('Erreur lors de la création de la localisation');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  deleteLocation: async locationId => {\n    try {\n      const response = await fetch(`${API_URL}/locations/${locationId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression de la localisation');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  // Contenu\n  getLocationContent: async (locationId, type) => {\n    try {\n      console.log('Fetching content:', {\n        locationId,\n        type\n      });\n      const response = await fetch(`${API_URL}/locations/${locationId}/content/${type}`);\n      if (!response.ok) {\n        console.error('Response status:', response.status);\n        throw new Error('Erreur lors du chargement du contenu');\n      }\n      const data = await response.json();\n      console.log('Content received:', data);\n      return data;\n    } catch (error) {\n      console.error('Erreur API:', error);\n      return [];\n    }\n  },\n  createContent: async (locationId, formData) => {\n    try {\n      console.log('API createContent called with exact locationId:', locationId);\n      console.log('locationId type:', typeof locationId);\n      if (!locationId || locationId === 'undefined' || locationId === undefined) {\n        throw new Error('ID de localisation invalide');\n      }\n      const response = await fetch(`${API_URL}/locations/${locationId}/content`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Erreur lors de la création du contenu');\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Erreur API détaillée:', error);\n      throw error;\n    }\n  },\n  getContent: async contentId => {\n    try {\n      const response = await fetch(`${API_URL}/content/${contentId}`);\n      if (!response.ok) throw new Error('Erreur lors du chargement du contenu');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  // Upload d'images\n  uploadImage: async file => {\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n      const response = await fetch(`${API_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) throw new Error('Erreur lors de l\\'upload de l\\'image');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  updateContent: async (contentId, formData) => {\n    try {\n      const response = await fetch(`${API_URL}/content/${contentId}`, {\n        method: 'PUT',\n        body: formData\n      });\n      if (!response.ok) throw new Error('Erreur lors de la mise à jour du contenu');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","api","getSystems","response","fetch","ok","Error","json","error","console","createSystem","name","method","headers","body","JSON","stringify","deleteSystem","systemId","getLocations","createLocation","deleteLocation","locationId","getLocationContent","type","log","status","data","createContent","formData","undefined","errorData","result","getContent","contentId","uploadImage","file","FormData","append","updateContent"],"sources":["/Users/cassielkitzinger/Desktop/RIFIM_App/src/services/api.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002/api';\n\nexport const api = {\n  // Systèmes\n  getSystems: async () => {\n    try {\n      const response = await fetch(`${API_URL}/systems`);\n      if (!response.ok) throw new Error('Erreur lors du chargement des systèmes');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      return [];\n    }\n  },\n\n  createSystem: async (name) => {\n    try {\n      const response = await fetch(`${API_URL}/systems`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name })\n      });\n      if (!response.ok) throw new Error('Erreur lors de la création du système');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  deleteSystem: async (systemId) => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression du système');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  // Localisations\n  getLocations: async (systemId) => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}/locations`);\n      if (!response.ok) throw new Error('Erreur lors du chargement des localisations');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      return [];\n    }\n  },\n\n  createLocation: async (systemId, name) => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}/locations`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name })\n      });\n      if (!response.ok) throw new Error('Erreur lors de la création de la localisation');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  deleteLocation: async (locationId) => {\n    try {\n      const response = await fetch(`${API_URL}/locations/${locationId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression de la localisation');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  // Contenu\n  getLocationContent: async (locationId, type) => {\n    try {\n      console.log('Fetching content:', { locationId, type });\n      const response = await fetch(`${API_URL}/locations/${locationId}/content/${type}`);\n      if (!response.ok) {\n        console.error('Response status:', response.status);\n        throw new Error('Erreur lors du chargement du contenu');\n      }\n      const data = await response.json();\n      console.log('Content received:', data);\n      return data;\n    } catch (error) {\n      console.error('Erreur API:', error);\n      return [];\n    }\n  },\n\n  createContent: async (locationId, formData) => {\n    try {\n      console.log('API createContent called with exact locationId:', locationId);\n      console.log('locationId type:', typeof locationId);\n      \n      if (!locationId || locationId === 'undefined' || locationId === undefined) {\n        throw new Error('ID de localisation invalide');\n      }\n  \n      const response = await fetch(`${API_URL}/locations/${locationId}/content`, {\n        method: 'POST',\n        body: formData\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Erreur lors de la création du contenu');\n      }\n  \n      const result = await response.json();\n      return result;\n    } catch (error) {\n        console.error('Erreur API détaillée:', error);\n        throw error;\n      }\n  },\n\n  getContent: async (contentId) => {\n    try {\n      const response = await fetch(`${API_URL}/content/${contentId}`);\n      if (!response.ok) throw new Error('Erreur lors du chargement du contenu');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  // Upload d'images\n  uploadImage: async (file) => {\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await fetch(`${API_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) throw new Error('Erreur lors de l\\'upload de l\\'image');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  updateContent: async (contentId, formData) => {\n    try {\n      const response = await fetch(`${API_URL}/content/${contentId}`, {\n        method: 'PUT',\n        body: formData\n      });\n      \n      if (!response.ok) throw new Error('Erreur lors de la mise à jour du contenu');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  }\n  \n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}