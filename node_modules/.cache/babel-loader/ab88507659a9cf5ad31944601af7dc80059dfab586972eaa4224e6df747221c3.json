{"ast":null,"code":"const API_URL = (() => {\n  console.log('Environment:', process.env.NODE_ENV);\n  console.log('API URL from env:', process.env.REACT_APP_API_URL);\n\n  // En production, utiliser le chemin relatif car le frontend et le backend sont sur le même domaine\n  if (process.env.NODE_ENV === 'production') {\n    return '/api';\n  }\n  // En développement, utiliser l'URL complète\n  return process.env.REACT_APP_API_URL || 'http://localhost:5002/api';\n})();\nconsole.log('Using API URL:', API_URL);\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nexport const api = {\n  getSystems: async () => {\n    console.log('🔵 Début getSystems');\n    try {\n      console.log('📡 Tentative de connexion à:', `${API_URL}/systems`);\n      const response = await fetch(`${API_URL}/systems`, {\n        method: 'GET',\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      console.log('📥 Réponse reçue:', {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText\n      });\n      if (!response.ok) {\n        console.log('❌ Réponse non OK');\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('✅ Données reçues:', data);\n      return data;\n    } catch (error) {\n      console.log('🔴 Erreur dans getSystems:', {\n        message: error.message,\n        stack: error.stack,\n        type: error.constructor.name\n      });\n      return [];\n    }\n  },\n  createSystem: async name => {\n    try {\n      const response = await fetch(`${API_URL}/systems`, {\n        method: 'POST',\n        headers: defaultHeaders,\n        credentials: 'include',\n        body: JSON.stringify({\n          name\n        })\n      });\n      if (!response.ok) throw new Error('Erreur lors de la création du système');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  deleteSystem: async systemId => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}`, {\n        method: 'DELETE',\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression du système');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  getLocations: async systemId => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}/locations`, {\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Erreur lors du chargement des localisations');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      return [];\n    }\n  },\n  createLocation: async (systemId, name) => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}/locations`, {\n        method: 'POST',\n        headers: defaultHeaders,\n        credentials: 'include',\n        body: JSON.stringify({\n          name\n        })\n      });\n      if (!response.ok) throw new Error('Erreur lors de la création de la localisation');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  deleteLocation: async locationId => {\n    try {\n      const response = await fetch(`${API_URL}/locations/${locationId}`, {\n        method: 'DELETE',\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression de la localisation');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  getLocationContent: async (locationId, type) => {\n    try {\n      console.log('Fetching content:', {\n        locationId,\n        type\n      });\n      const response = await fetch(`${API_URL}/locations/${locationId}/content/${type}`, {\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        console.error('Response status:', response.status);\n        throw new Error('Erreur lors du chargement du contenu');\n      }\n      const data = await response.json();\n      console.log('Content received:', data);\n      return data;\n    } catch (error) {\n      console.error('Erreur API:', error);\n      return [];\n    }\n  },\n  createContent: async (locationId, formData) => {\n    try {\n      console.log('API createContent called with exact locationId:', locationId);\n      if (!locationId || locationId === 'undefined' || locationId === undefined) {\n        throw new Error('ID de localisation invalide');\n      }\n      const response = await fetch(`${API_URL}/locations/${locationId}/content`, {\n        method: 'POST',\n        credentials: 'include',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Erreur lors de la création du contenu');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API détaillée:', error);\n      throw error;\n    }\n  },\n  getContent: async contentId => {\n    try {\n      console.log('Frontend API: Starting request to:', `${API_URL}/content/${contentId}`);\n      const response = await fetch(`${API_URL}/content/${contentId}`, {\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Complete error details:', {\n        error: error.message,\n        stack: error.stack\n      });\n      throw error;\n    }\n  },\n  uploadImage: async file => {\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n      const response = await fetch(`${API_URL}/upload`, {\n        method: 'POST',\n        credentials: 'include',\n        body: formData\n      });\n      if (!response.ok) throw new Error('Erreur lors de l\\'upload de l\\'image');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  deleteContent: async contentId => {\n    try {\n      const response = await fetch(`${API_URL}/content/${contentId}`, {\n        method: 'DELETE',\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression du contenu');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n  updateContent: async (contentId, formData) => {\n    try {\n      const response = await fetch(`${API_URL}/content/${contentId}`, {\n        method: 'PUT',\n        credentials: 'include',\n        body: formData\n      });\n      if (!response.ok) throw new Error('Erreur lors de la mise à jour du contenu');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["API_URL","console","log","process","env","NODE_ENV","REACT_APP_API_URL","defaultHeaders","api","getSystems","response","fetch","method","headers","credentials","ok","status","statusText","Error","data","json","error","message","stack","type","constructor","name","createSystem","body","JSON","stringify","deleteSystem","systemId","getLocations","createLocation","deleteLocation","locationId","getLocationContent","createContent","formData","undefined","errorData","getContent","contentId","uploadImage","file","FormData","append","deleteContent","updateContent"],"sources":["/Users/cassielkitzinger/Desktop/RIFIM_App/src/services/api.js"],"sourcesContent":["const API_URL = (() => {\n  console.log('Environment:', process.env.NODE_ENV);\n  console.log('API URL from env:', process.env.REACT_APP_API_URL);\n  \n  // En production, utiliser le chemin relatif car le frontend et le backend sont sur le même domaine\n  if (process.env.NODE_ENV === 'production') {\n    return '/api';\n  }\n  // En développement, utiliser l'URL complète\n  return process.env.REACT_APP_API_URL || 'http://localhost:5002/api';\n})();\n\nconsole.log('Using API URL:', API_URL);\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\n\nexport const api = {\n  getSystems: async () => {\n    console.log('🔵 Début getSystems');\n    try {\n      console.log('📡 Tentative de connexion à:', `${API_URL}/systems`);\n      const response = await fetch(`${API_URL}/systems`, {\n        method: 'GET',\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n\n      console.log('📥 Réponse reçue:', {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText\n      });\n\n      if (!response.ok) {\n        console.log('❌ Réponse non OK');\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('✅ Données reçues:', data);\n      return data;\n    } catch (error) {\n      console.log('🔴 Erreur dans getSystems:', {\n        message: error.message,\n        stack: error.stack,\n        type: error.constructor.name\n      });\n      return [];\n    }\n  },\n\n  createSystem: async (name) => {\n    try {\n      const response = await fetch(`${API_URL}/systems`, {\n        method: 'POST',\n        headers: defaultHeaders,\n        credentials: 'include',\n        body: JSON.stringify({ name })\n      });\n      if (!response.ok) throw new Error('Erreur lors de la création du système');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  deleteSystem: async (systemId) => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}`, {\n        method: 'DELETE',\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression du système');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  getLocations: async (systemId) => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}/locations`, {\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Erreur lors du chargement des localisations');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      return [];\n    }\n  },\n\n  createLocation: async (systemId, name) => {\n    try {\n      const response = await fetch(`${API_URL}/systems/${systemId}/locations`, {\n        method: 'POST',\n        headers: defaultHeaders,\n        credentials: 'include',\n        body: JSON.stringify({ name })\n      });\n      if (!response.ok) throw new Error('Erreur lors de la création de la localisation');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  deleteLocation: async (locationId) => {\n    try {\n      const response = await fetch(`${API_URL}/locations/${locationId}`, {\n        method: 'DELETE',\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression de la localisation');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  getLocationContent: async (locationId, type) => {\n    try {\n      console.log('Fetching content:', { locationId, type });\n      const response = await fetch(`${API_URL}/locations/${locationId}/content/${type}`, {\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        console.error('Response status:', response.status);\n        throw new Error('Erreur lors du chargement du contenu');\n      }\n      const data = await response.json();\n      console.log('Content received:', data);\n      return data;\n    } catch (error) {\n      console.error('Erreur API:', error);\n      return [];\n    }\n  },\n\n  createContent: async (locationId, formData) => {\n    try {\n      console.log('API createContent called with exact locationId:', locationId);\n      \n      if (!locationId || locationId === 'undefined' || locationId === undefined) {\n        throw new Error('ID de localisation invalide');\n      }\n  \n      const response = await fetch(`${API_URL}/locations/${locationId}/content`, {\n        method: 'POST',\n        credentials: 'include',\n        body: formData\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Erreur lors de la création du contenu');\n      }\n  \n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API détaillée:', error);\n      throw error;\n    }\n  },\n\n  getContent: async (contentId) => {\n    try {\n      console.log('Frontend API: Starting request to:', `${API_URL}/content/${contentId}`);\n      \n      const response = await fetch(`${API_URL}/content/${contentId}`, {\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Complete error details:', {\n        error: error.message,\n        stack: error.stack\n      });\n      throw error;\n    }\n  },\n\n  uploadImage: async (file) => {\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await fetch(`${API_URL}/upload`, {\n        method: 'POST',\n        credentials: 'include',\n        body: formData\n      });\n\n      if (!response.ok) throw new Error('Erreur lors de l\\'upload de l\\'image');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  deleteContent: async (contentId) => {\n    try {\n      const response = await fetch(`${API_URL}/content/${contentId}`, {\n        method: 'DELETE',\n        headers: defaultHeaders,\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Erreur lors de la suppression du contenu');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  },\n\n  updateContent: async (contentId, formData) => {\n    try {\n      const response = await fetch(`${API_URL}/content/${contentId}`, {\n        method: 'PUT',\n        credentials: 'include',\n        body: formData\n      });\n      \n      if (!response.ok) throw new Error('Erreur lors de la mise à jour du contenu');\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur API:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}